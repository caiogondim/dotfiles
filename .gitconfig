[alias]

  # View abbreviated SHA, description, and history graph of the latest 20 commits
  l = log --pretty=oneline -n 20 --graph --abbrev-commit

  # View the current working tree status using the short format
  s = status -s

  # Show the diff between the latest commit and the current state, ignoring whitespace
  d = !"git diff-index --quiet HEAD --; git --no-pager diff --patch-with-stat -w"

  # Better git grep
  g = grep --break --heading --line-number

  # `git di $number` shows the diff between the state `$number` revisions ago and the current state
  di = !"d() { git --no-pager diff --patch-with-stat HEAD~$1; }; git --no-pager diff-index --quiet HEAD --; d"

  # Pull with rebase, prune and submodule update
  up = !git pull --rebase --prune $@ && git submodule update --init --recursive

  # Clone a repository including all submodules
  cl = clone --recursive

  # Commit all changes
  ca = !git add -A && git commit -av

  # Commit alias
  ci = commit -v

  # Checkout alias
  co = checkout

  # Checkout to a branch, creating it
  cob = checkout -b

  # Show verbose output about tags, branches or remotes
  tags = tag -l
  branches = branch -a
  remotes = remote -v

  # Amend the currently staged files to the latest commit
  amend = commit --amend --reuse-message=HEAD

  # Credit an author on the latest commit
  credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

  # Interactive rebase with the given number of latest commits
  reb = "!r() { git rebase -i HEAD~$1; }; r"

  # Find branches containing commit
  fb = "!f() { git branch -a --contains $1; }; f"

  # Find tags containing commit
  ft = "!f() { git describe --always --contains $1; }; f"

  # Find commits by source code
  fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

  # Find commits by commit message
  fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

  # Remove branches that have already been merged with master
  # a.k.a. ‘delete merged’
  dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

  # List contributors with number of commits
  contributors = shortlog --summary --numbered

  #
  pupu = "!git up && git push"

  # diff-so-fancy
  dsf = "!f() { [ -z \"$GIT_PREFIX\" ] || cd \"$GIT_PREFIX\" && git diff --color \"$@\" | diff-so-fancy  | less --tabs=4 -RFX; }; f"

[apply]

  # Detect whitespace errors when applying a patch
  whitespace = fix

[core]

  # Use custom `.gitignore` and `.gitattributes`
  excludesfile = ~/.gitignore
  attributesfile = ~/.gitattributes

  # Treat spaces before tabs and all kinds of trailing whitespace as an error
  # [default] trailing-space: looks for spaces at the end of a line
  # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
  whitespace = space-before-tab,-indent-with-non-tab,trailing-space

  # Make `git rebase` safer on OS X
  # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
  trustctime = false

  editor = "vim -f"

  # https://git-scm.com/docs/git-update-index#_untracked_cache
  untrackedCache = true

[color]

  ui = always

[color "branch"]

  current = yellow reverse
  local = yellow
  remote = green

[color "diff"]

  meta = yellow bold
  commit = green bold
  frag = magenta bold
  old = red bold
  new = green bold
  whitespace = red reverse
  
[color "diff-highlight"]

  oldNormal = red bold
  oldHighlight = red bold
  newNormal = green bold
  newHighlight = green bold

[color "status"]

  added = yellow
  changed = green
  untracked = cyan

[color "grep"]

  linenumber = bold
  match = yellow
  filename = bold

[diff]

  # Detect copies as well as renames
  renames = copies

[help]

  # Don't correct and execute mistyped commands
  autocorrect = 0

[merge]

  # Include summaries of merged commits in newly created merge commit messages
  log = true

  # Shows conflict in diff3 format
  conflictstyle = diff3

  tool = vimdiff
  prompt = false

[grep]
  linenumber = true

[push]

  # Use the Git 1.x.x default to avoid errors on machines with old Git
  # installations. To use `simple` instead, add this to your `~/.extra` file:
  # `git config --global push.default simple`. See http://git.io/mMah-w.
  default = matching

# URL shorthands

[url "git@github.com:"]

  insteadOf = "gh:"
  pushInsteadOf = "github:"
  pushInsteadOf = "git://github.com/"

[url "git://github.com/"]

  insteadOf = "github:"

[url "git@gist.github.com:"]

  insteadOf = "gst:"
  pushInsteadOf = "gist:"
  pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]

  insteadOf = "gist:"

[user]
# email = {{git_email}}
# name = {{git_name}}

[commit]
  # template = ~/.git-commit-msg-tmpl
  # gpgsign = true
